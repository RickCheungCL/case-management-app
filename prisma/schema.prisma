generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Case {
  id                   String              @id @default(cuid())
  userId               String
  customerName         String
  projectDetails       String
  uploadToken          String              @default(uuid())
  status               String              @default("New")
  createdAt            DateTime            @default(now())
  updatedAt            DateTime            @updatedAt
  schoolName           String
  contactPerson        String
  emailAddress         String
  phoneNumber          String
  schoolAddress        String
  num2FtLinearHighBay  Int                 @default(0)
  num150WUFOHighBay    Int                 @default(0)
  num240WUFOHighBay    Int                 @default(0)
  num2x2LEDPanel       Int                 @default(0)
  num2x4LEDPanel       Int                 @default(0)
  num1x4LEDPanel       Int                 @default(0)
  num4FtStripLight     Int                 @default(0)
  lightingPurpose      String
  facilitiesUsedIn     String
  installationService  String
  operationDaysPerYear Int                 @default(0)
  operationHoursPerDay Int                 @default(0)
  activityLogs         ActivityLog[]
  user                 User                @relation(fields: [userId], references: [id])
  fixtureCounts        CaseFixtureCount[]
  documents            Document[]
  installationDetail   InstallationDetail?
  onSiteVisit          OnSiteVisit?
  photos               Photo[]
}

model Photo {
  id              String   @id @default(cuid())
  url             String
  caseId          String
  uploadedViaLink Boolean  @default(false)
  comment         String?
  customName      String?
  createdAt       DateTime @default(now())
  case            Case     @relation(fields: [caseId], references: [id])
}

model Document {
  id              String   @id @default(cuid())
  url             String
  fileName        String
  customName      String?
  caseId          String
  uploadedViaLink Boolean  @default(false)
  createdAt       DateTime @default(now())
  case            Case     @relation(fields: [caseId], references: [id])
}

model User {
  id           String        @id @default(cuid())
  email        String        @unique
  name         String?
  password     String?
  role         Role          @default(USER)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  activityLogs ActivityLog[]
  cases        Case[]
}

model ActivityLog {
  id        String   @id @default(cuid())
  caseId    String
  action    String
  createdAt DateTime @default(now())
  userId    String
  case      Case     @relation(fields: [caseId], references: [id])
  user      User     @relation(fields: [userId], references: [id])
}

model LightFixtureType {
  id            String             @id @default(cuid())
  name          String             @unique
  description   String?
  createdAt     DateTime           @default(now())
  SKU           String?
  fixtureCounts CaseFixtureCount[]
  wattage       Int?
  imageUrl      String?
}

model CaseFixtureCount {
  id            String           @id @default(cuid())
  caseId        String
  fixtureTypeId String
  count         Int              @default(0)
  case          Case             @relation(fields: [caseId], references: [id])
  fixtureType   LightFixtureType @relation(fields: [fixtureTypeId], references: [id])
}

model InstallationDetail {
  id            String                  @id @default(cuid())
  caseId        String                  @unique
  ceilingHeight Float?
  notes         String?
  createdAt     DateTime                @default(now())
  updatedAt     DateTime                @updatedAt
  case          Case                    @relation(fields: [caseId], references: [id])
  tags          InstallationDetailTag[]
}

model InstallationTag {
  id                     String                  @id @default(cuid())
  name                   String                  @unique
  createdAt              DateTime                @default(now())
  installationDetailTags InstallationDetailTag[]
}

model InstallationDetailTag {
  id                   String             @id @default(cuid())
  installationDetailId String
  tagId                String
  installationDetail   InstallationDetail @relation(fields: [installationDetailId], references: [id])
  tag                  InstallationTag    @relation(fields: [tagId], references: [id])
}

model OnSiteVisit {
  id        String            @id @default(cuid())
  caseId    String            @unique
  createdAt DateTime          @default(now())
  case      Case              @relation(fields: [caseId], references: [id])
  rooms     OnSiteVisitRoom[]
}

model OnSiteExistingProduct {
  id        String          @id @default(cuid())
  roomId    String
  productId String
  quantity  Int
  bypassBallast Boolean         @default(false) 
  product   Product         @relation(fields: [productId], references: [id])
  room      OnSiteVisitRoom @relation(fields: [roomId], references: [id])
}

model Product {
  id               String                  @id @default(cuid())
  name             String
  wattage          Float
  description      String?
  category         String?
  existingProducts OnSiteExistingProduct[]
}

model OnSiteVisitRoom {
  id              String                   @id @default(cuid())
  onSiteVisitId   String
  location        String
  locationTagId   String?
  lightingIssue   String
  customerRequest String
  mountingKitQty  String
  motionSensorQty Int
  createdAt       DateTime                 @default(now())
  ceilingHeight   Int?
  existingLights  OnSiteExistingProduct[]
  suggestedLights OnSiteSuggestedProduct[]
  photos          OnSiteVisitPhoto[]
  locationTag     OnSiteLocationTag?       @relation(fields: [locationTagId], references: [id])
  onSiteVisit     OnSiteVisit              @relation(fields: [onSiteVisitId], references: [id])
}

model OnSiteVisitPhoto {
  id        String                     @id @default(cuid())
  roomId    String
  url       String
  comment   String
  createdAt DateTime                   @default(now())
  room      OnSiteVisitRoom            @relation(fields: [roomId], references: [id])
  tags      OnSiteVisitPhotoTagPivot[]
}

model OnSiteVisitPhotoTagPivot {
  id      String           @id @default(cuid())
  photoId String
  tagId   String
  photo   OnSiteVisitPhoto @relation(fields: [photoId], references: [id])
  tag     OnSitePhotoTag   @relation(fields: [tagId], references: [id])
}

model OnSiteSuggestedProduct {
  id        String          @id @default(cuid())
  roomId    String
  productId String
  quantity  Int
  room      OnSiteVisitRoom @relation(fields: [roomId], references: [id])
}

model OnSiteLocationTag {
  id        String            @id @default(cuid())
  name      String            @unique
  createdAt DateTime          @default(now())
  rooms     OnSiteVisitRoom[]
}

model OnSitePhotoTag {
  id           String                     @id @default(cuid())
  name         String                     @unique
  createdAt    DateTime                   @default(now())
  taggedPhotos OnSiteVisitPhotoTagPivot[]
}

model QuoteCounter {
  id        String   @id @default(cuid())
  caseId    String   @unique
  count     Int      @default(1)
  updatedAt DateTime @updatedAt
}

enum Role {
  ADMIN
  USER
}
